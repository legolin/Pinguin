%div{:style => 'margin: .75in auto; width: 600px'}
  %h2 Hosts

  %table
    %tr
      %th.text-left Host
      %th.text-center Uptime
      %th.text-center Avg response
    -for host in @hosts
      %tr
        %td.text-left= host.url
        %td.text-center= "#{(@summaries[host._id]['uptime'] * 10000).to_i / 100.0} %"
        %td.text-center= @summaries[host._id]['avgRequestTime'] == 1.0/0 ?  'N/A' : (@summaries[host._id]['avgRequestTime'] * 100).to_i / 100.0

  %br

  #placeholder{:style => 'width: 600px; height: 300px'}
  #overview{:style => 'height: 50px; width: 600px;'}
  :javascript
    $(function () {
        var datas = #{@datas.to_json};
        var datas_without_labels = [];
        for(x in datas) {
          item = datas[x];
          data_copy = {data : item['data']};
          datas_without_labels.push(data_copy);
        }

        // helper for returning the weekends in a period
        function weekendAreas(axes) {
            var markings = [];
            var d = new Date(axes.xaxis.min);
            // go to the first Saturday
            d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
            d.setUTCSeconds(0);
            d.setUTCMinutes(0);
            d.setUTCHours(0);
            var i = d.getTime();
            do {
                // when we don't set yaxis, the rectangle automatically
                // extends to infinity upwards and downwards
                markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
                i += 7 * 24 * 60 * 60 * 1000;
            } while (i < axes.xaxis.max);

            return markings;
        }
        
        var options = {
            xaxis: { mode: "time", tickLength: 5 },
            selection: { mode: "x" },
            grid: { markings: weekendAreas }
        };
        
        var plot = $.plot($("#placeholder"), datas, options);
        
        var overview = $.plot($("#overview"), datas_without_labels, {
            series: {
                lines: { show: true, lineWidth: 1 },
                shadowSize: 0
            },
            xaxis: { ticks: [], mode: "time" },
            yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
            selection: { mode: "x" }
        });

        // now connect the two
        
        $("#placeholder").bind("plotselected", function (event, ranges) {
            // do the zooming
            plot = $.plot($("#placeholder"), datas,
                          $.extend(true, {}, options, {
                              xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
                          }));

            // don't fire event on the overview to prevent eternal loop
            overview.setSelection(ranges, true);
        });
        
        $("#overview").bind("plotselected", function (event, ranges) {
            plot.setSelection(ranges);
        });
    });
